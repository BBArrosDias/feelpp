# - Config file for the Feel++ package
# This module looks for Feel (Library for the Finite Element Method) support
# It defines the following variables
#  FEELPP_INCLUDE_DIR = where feel/feelcore/feel.hpp can be found
#  FEELPP_LIBRARY    = the library to link in

# Can be used starting from version 3.x
#include(CMakeFindDependencyMacro)
#find_dependency(Feel++ 2.6.4)

# this variable allows the users to autoload the library
# meaning that this file will will automatically use
# include_directories( ... ), add_definitions( ... ), 
# set the compiler flags, link_directories( ... )
set(FEELPP_AUTOLOAD "1")

set(FEELPP_CONFIG_FILE ${CMAKE_CURRENT_LIST_FILE})
message(STATUS "[Feel++] Using config file: ${FEELPP_CONFIG_FILE}")

if(FEELPP_AUTOLOAD)
    message(STATUS "[Feel++] Information: FEELPP_AUTOLOAD variable is set. This means that the Feel++Config.cmake file will automatically set your environment to use Feel++.")
    message(STATUS "[Feel++] Information: If you want to configure your environment manually, please set it to 0 and refer to the Feel++Config.cmake file.") 
endif()

set(FEELPP_FOUND "1")

set(FEELPP_CXX_COMPILER_ID "@CMAKE_CXX_COMPILER_ID@")  
set(FEELPP_CXX_COMPILER_VERSION "@CMAKE_CXX_COMPILER_VERSION@")

if(NOT "${FEELPP_CXX_COMPILER_ID}" MATCHES "${CMAKE_CXX_COMPILER_ID}")
    message(WARNING "Your compiler (${CMAKE_CXX_COMPILER_ID}) does not match the one used to build Feel++ (${FEELPP_CXX_COMPILER_ID})")
else()
    if(NOT "${FEELPP_CXX_COMPILER_VERSION}" MATCHES "${CMAKE_CXX_COMPILER_VERSION}") 
        message(WARNING "Your compiler version (${CMAKE_CXX_COMPILER_VERSION}) does not match the one used to build Feel++ (${FEELPP_CXX_COMPILER_VERSION})")
    else()
        message(STATUS "[Feel++] Feel++ was built with ${FEELPP_CXX_COMPILER_ID} ${FEELPP_CXX_COMPILER_VERSION}")
    endif()
endif()

set(FEELPP_C_FLAGS "@CMAKE_C_FLAGS@")
if(FEELPP_AUTOLOAD)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FEELPP_C_FLAGS}")
endif()  
set(FEELPP_CXX_FLAGS "@CMAKE_CXX_FLAGS@")
if(FEELPP_AUTOLOAD)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FEELPP_CXX_FLAGS}")
endif()  
set(FEELPP_DEFINITIONS "@FEELPP_DEFINITIONS@")
if(FEELPP_AUTOLOAD)
    # Get the already loaded definitions
    get_directory_property( _CURRENT_DEFINITIONS DIRECTORY ${CMAKE_SOURCE_DIR} COMPILE_DEFINITIONS )
    set_property(DIRECTORY ${CMAKE_SOURCE_DIR} APPEND PROPERTY COMPILE_DEFINITIONS ${FEELPP_DEFINITIONS} ${_CURRENT_DEFINITIONS})
    unset(_CURRENT_DEFINITIONS)
endif()  
 
## Compute paths
set(FEELPP_INCLUDE_DIR "@FEELPP_INCLUDE_DIR@")
set(FEELPP_DEPS_INCLUDE_DIR "@FEELPP_DEPS_INCLUDE_DIR@")
if(FEELPP_AUTOLOAD)
    include_directories(${FEELPP_INCLUDE_DIR})
    include_directories(${FEELPP_DEPS_INCLUDE_DIR})
endif()  
set(FEELPP_DEPS_LINK_DIR "@FEELPP_DEPS_LINK_DIR@")
if(FEELPP_AUTOLOAD)
    link_directories(${FEELPP_DEPS_LINK_DIR})
endif()  
 
## Our library dependencies (contains definitions for IMPORTED targets)
##if(NOT TARGET foo AND NOT FooBar_BINARY_DIR)
  ##include("${FOOBAR_CMAKE_DIR}/FooBarTargets.cmake")
##endif()
   
# These are IMPORTED targets created by FooBarTargets.cmake
set(FEELPP_LIBRARY "feelpp")
set(FEELPP_LIBRARIES "@FEELPP_LIBRARIES@")

# Add info about with what Feel++ has been built
set(FEELPP_HAS_ANN "@FEELPP_HAS_ANN_H@")
set(FEELPP_HAS_HDF5 "@FEELPP_HAS_HDF5@")
set(FEELPP_HAS_VTK "@FEELPP_HAS_VTK@")
set(FEELPP_VTK_INSITU_ENABLED "@FEELPP_VTK_INSITU_ENABLED@")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR}/modules)
include(feelpp.macros)

