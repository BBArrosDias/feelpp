# - Config file for the Feel++ package
# This module looks for Feel (Library for the Finite Element Method) support
# It defines the following variables
#  FEELPP_INCLUDE_DIR = where feel/feelcore/feel.hpp can be found
#  FEELPP_LIBRARY    = the feel++ library
#  FEELPP_LIBRARIES  = libraries of feel++ dependencies

set(FEELPP_INSTALL_DIR @CMAKE_INSTALL_PREFIX@)
set(FEELPP_DIR ${FEELPP_INSTALL_DIR})

if (0)
set(FEELPP_CONFIG_FILE ${CMAKE_CURRENT_LIST_FILE})
message(STATUS "[Feel++] Using config file: ${FEELPP_CONFIG_FILE}")

get_filename_component(_CONFIG_DIR ${FEELPP_CONFIG_FILE} PATH)
get_filename_component(TOP_INSTALL_DIR ${_CONFIG_DIR}/../../../../ ABSOLUTE)
message(STATUS "[Feel++] Current installation directory: ${TOP_INSTALL_DIR}")
set(FEELPP_DIR ${TOP_INSTALL_DIR})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR})
endif()

set(FEELPP_FOUND "1")

set(FEELPP_CXX_COMPILER_ID "@CMAKE_CXX_COMPILER_ID@")  
set(FEELPP_CXX_COMPILER_VERSION "@CMAKE_CXX_COMPILER_VERSION@")
set(FEELPP_CXX_STANDARD @CMAKE_CXX_STANDARD@)
set(FEELPP_CXX_STANDARD_REQUIRED @CMAKE_CXX_STANDARD_REQUIRED@)

set(FEELPP_C_FLAGS "@CMAKE_C_FLAGS@")
set(FEELPP_CXX_FLAGS "@CMAKE_CXX_FLAGS@")

set(FEELPP_ENABLED_OPTIONS "@FEELPP_ENABLED_OPTIONS@")
# Feel++ mesh configuration
set(FEELPP_MESH_MAX_ORDER "@FEELPP_MESH_MAX_ORDER@")
set(FEELPP_INSTANTIATION_ORDER_MAX "@FEELPP_INSTANTIATION_ORDER_MAX@")

# Add info about with what Feel++ has been built
set(FEELPP_HAS_GFLAGS "@FEELPP_HAS_GFLAGS@")
set(FEELPP_HAS_GLOG "@FEELPP_HAS_GLOG@" )
set(FEELPP_HAS_GINAC "@FEELPP_HAS_GINAC@" )
set(FEELPP_HAS_METIS "@FEELPP_HAS_METIS@")
set(FEELPP_HAS_NLOPT "@FEELPP_HAS_NLOPT@")
set(FEELPP_HAS_IPOPT "@FEELPP_HAS_IPOPT@")
set(FEELPP_HAS_ANN "@FEELPP_HAS_ANN_H@")
set(FEELPP_HAS_GMSH "@FEELPP_HAS_GMSH@")
set(FEELPP_HAS_HDF5 "@FEELPP_HAS_HDF5@")
set(FEELPP_HAS_PARAVIEW "@FEELPP_HAS_PARAVIEW@")
set(FEELPP_HAS_VTK "@FEELPP_HAS_VTK@")
set(FEELPP_VTK_INSITU_ENABLED "@FEELPP_VTK_INSITU_ENABLED@")
if (FEELPP_HAS_PARAVIEW)
  set(FEELPP_PARAVIEW_DIR "@FEELPP_PARAVIEW_DIR@")
elseif (FEELPP_HAS_VTK)
  set(FEELPP_VTK_DIR "@FEELPP_VTK_DIR@")
endif()
set(FEELPP_HAS_PETSC "@FEELPP_HAS_PETSC@")
set(FEELPP_HAS_SLEPC "@FEELPP_HAS_SLEPC@")
set(FEELPP_HAS_VTK "@FEELPP_HAS_VTK@")

set(FEELPP_HAS_ASCIIDOCTOR "@FEELPP_HAS_ASCIIDOCTOR@")
if (FEELPP_HAS_ASCIIDOCTOR)
  set(FEELPP_HAS_ASCIIDOCTOR_MANPAGE "@FEELPP_HAS_ASCIIDOCTOR_MANPAGE@")
  set(FEELPP_HAS_ASCIIDOCTOR_HTML5 "@FEELPP_HAS_ASCIIDOCTOR_HTML5@")
  set(FEELPP_A2M "@FEELPP_A2M@")
  set(FEELPP_A2H "@FEELPP_A2H@")
  set(FEELPP_STYLESHEET "@FEELPP_STYLESHEET@")
endif()

set(FEELPP_HAS_CLING_INTERPRETER "@FEELPP_HAS_CLING_INTERPRETER@")
if (FEELPP_HAS_CLING_INTERPRETER)
  set(FEELPP_CLING_BIN "@FEELPP_CLING_BIN@")
endif()

include(${CMAKE_CURRENT_LIST_DIR}/feelpp.compile.definition.config.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/feelpp.libraries.config.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/feelpp.include.config.cmake)

# the variable FEELPP_DONT_SETUP_CMAKE allows the users to not setup the library
# meaning that this file will will automatically use
# include_directories( ... ), add_definitions( ... ), 
# set the compiler flags, link_directories( ... )
if (NOT FEELPP_DONT_SETUP_CMAKE)

  if(NOT "${FEELPP_CXX_COMPILER_ID}" MATCHES "${CMAKE_CXX_COMPILER_ID}")
    message(WARNING "[Feel++] Your compiler (${CMAKE_CXX_COMPILER_ID}) does not match the one used to build Feel++ (${FEELPP_CXX_COMPILER_ID})")
  else()
    if(NOT "${FEELPP_CXX_COMPILER_VERSION}" MATCHES "${CMAKE_CXX_COMPILER_VERSION}")
      message(WARNING "[Feel++] Your compiler version (${CMAKE_CXX_COMPILER_VERSION}) does not match the one used to build Feel++ (${FEELPP_CXX_COMPILER_VERSION})")
    else()
      message(STATUS "[Feel++] built with ${FEELPP_CXX_COMPILER_ID} ${FEELPP_CXX_COMPILER_VERSION}")
    endif()
  endif()

  include_directories(${FEELPP_INCLUDE_DIR})

  # Get the already loaded definitions
  get_directory_property( _CURRENT_DEFINITIONS DIRECTORY ${CMAKE_SOURCE_DIR} COMPILE_DEFINITIONS )
  set_property(DIRECTORY ${CMAKE_SOURCE_DIR} APPEND PROPERTY COMPILE_DEFINITIONS ${FEELPP_COMPILE_DEFINITIONS} ${_CURRENT_DEFINITIONS})
  unset(_CURRENT_DEFINITIONS)

  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FEELPP_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FEELPP_CXX_FLAGS}")
  set(CMAKE_CXX_STANDARD ${FEELPP_CXX_STANDARD})
  set(CMAKE_CXX_STANDARD_REQUIRED ${FEELPP_CXX_STANDARD_REQUIRED})
  
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_LIST_DIR})
  include(feelpp.host)
  include(feelpp.macros)

  MESSAGE(STATUS "[Feel++] loaded with packages: ${FEELPP_ENABLED_OPTIONS}")
endif()
