  set( OM_MAKEFILE ${OM_NAME}.makefile )

  file( MAKE_DIRECTORY ${OMLIB_DIR} )
  #generate the .c and .h using omc
  execute_process( COMMAND ${OMC_COMPILER} -s ${OM_SRCS}  WORKING_DIRECTORY ${OMLIB_DIR} )

  #rewrite some parts of the makefile generated by omc
  file( READ ${OMLIB_DIR}/${OM_MAKEFILE} om_makefilestring )
  string( REPLACE "(EXEEXT)" "(DLLEXT)" om_makefilestring ${om_makefilestring} )
  string( REPLACE "$(CFLAGS)" "-shared $(CFLAGS)" om_makefilestring ${om_makefilestring} )
  string( REPLACE "-o " "-o lib" om_makefilestring ${om_makefilestring} )
  file( WRITE ${OMLIB_DIR}/${OM_MAKEFILE} ${om_makefilestring})

  # generate the library using the custom makefile
  execute_process( COMMAND make -f ${OMLIB_DIR}/${OM_MAKEFILE} WORKING_DIRECTORY ${OMLIB_DIR} )

  include_directories( ${OMLIB_DIR} )

  #generate custom header
  string( TOUPPER ${OM_NAME} OM_UP_NAME )
  set( CODE "/* this header is generated automatically by Feelpp to wrap OM library*/
#ifndef FEEL${OM_UP_NAME}_HPP
#define FEEL${OM_UP_NAME}_HPP 1
#define OPENMODELICA_XML_FROM_FILE_AT_RUNTIME
#include <string>

extern \"C\"
{
#include <${OM_NAME}_model.h>

void ${OM_NAME}_setupDataStruc(DATA *data, threadData_t *threadData)\;

static int rml_execution_failed()
{
    fflush(NULL)\;
    fprintf(stderr, \"Execution failed!\\n\")\;
    fflush(NULL)\;
    return 1\;
}
}

#include <feel/feelom/ommodel.hpp>
namespace Feel
{

class Feel${OM_NAME} : public OMModel
{
public :

    void setupDataStruc( DATA *data, threadData_t *threadData ) override
    {
        return  ${OM_NAME}_setupDataStruc( data, threadData )\;
    }

private :

}\;
} //namespace Feel




#endif
")
  file( WRITE ${OMLIB_DIR}/feel${OM_NAME}.hpp ${CODE} )
