###  CMakeLists.txt ---

#  Author(s): Christophe Prud'homme <christophe.prudhomme@ujf-grenoble.fr>
#       Date: 2010-06-12
#
#  Copyright (C) 2010 Universite Joseph Fourier (Grenoble I)
#
# Distributed under the GPL(GNU Public License):
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#
include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
set( CR1P0 "// this file is automatically generated
#include <stokes.hpp>
int
main( int argc, char** argv )
{
    using namespace Feel\;
    Feel::Assert::setLog( \"stokes-.assert\")\;
    const int nDim = 2\;
    typedef Feel::Stokes<nDim, CrouzeixRaviart<1, Vectorial,PointSetEquiSpaced>,Lagrange<0, Scalar,Discontinuous>, Simplex> stokes_type\;
    stokes_type stokes( \"cr1p0\", argc, argv, makeAbout(), makeOptions() )\;
    stokes.run()\;
}")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_cr1p0.cpp ${CR1P0})
add_executable(feel_perf_stokes_cr1p0  feel_perf_stokes_cr1p0.cpp )
target_link_libraries(feel_perf_stokes_cr1p0 ${FEEL_LIBRARIES} )

foreach( fem cr1p0 p2p1 p3p2 p4p3 p5p4 )
  set( EXEC "#!/bin/sh
# this file is generated automatically
for h in 0.2 0.1 0.05 0.025 0.0125 0.01
do

  ./feel_perf_stokes_${fem} --hsize=\$h --bctype=1 -ksp_constant_null_space true -pc_type fieldsplit -pc_fieldsplit_type schur -fieldsplit_0_pc_type lu -fieldsplit_0_ksp_type gmres -fieldsplit_1_pc_type none -fieldsplit_1_ksp_type gmres   -fieldsplit_1_ksp_max_it 1000 -fieldsplit_1_ksp_converged_use_initial_residual_norm true > log-$h 2>&1

echo \"==============================\"
echo \"h=\$h\"
cat $HOME/feel/perf/stokes/stokes/Simplex_2_1_2/${fem}/h_\$h/toto-1.0 | grep \"_error||_2\"
cat $HOME/feel/perf/stokes/stokes/Simplex_2_1_2/${fem}/h_\$h/toto-1.0 | grep time
cat $HOME/feel/perf/stokes/stokes/Simplex_2_1_2/${fem}/h_\$h/toto-1.0 | grep elements
cat $HOME/feel/perf/stokes/stokes/Simplex_2_1_2/${fem}/h_\$h/toto-1.0 | grep dof

done

")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/exec-${fem}.sh ${EXEC})
endforeach()

foreach(N 2 3 4 5)
  math (EXPR P '${N}-1')
  set( LAG "// this file is automatically generated
#include <stokes.hpp>
int
main( int argc, char** argv )
{
    using namespace Feel\;
    Feel::Assert::setLog( \"stokes-p${N}p${P}.assert\")\;

    const int nDim = 2\;
    typedef Feel::Stokes<nDim, Lagrange<${N}, Vectorial>,Lagrange<${P}, Scalar>, Simplex> stokes_type\;
    stokes_type stokes( \"p${N}p${P}\", argc, argv, makeAbout(), makeOptions() )\;
    stokes.run()\;
}")
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_p${N}p${P}.cpp ${LAG})
add_executable(feel_perf_stokes_p${N}p${P}  feel_perf_stokes_p${N}p${P}.cpp )
target_link_libraries(feel_perf_stokes_p${N}p${P} ${FEEL_LIBRARIES} )
endforeach()

configure_file(stokes.cfg stokes.cfg)




# add_executable(feel_perf_stokes_s  stokes_bench.cpp )
# add_executable(feel_perf_stokes_hc  stokes_bench_hc.cpp )
# target_link_libraries(feel_perf_stokes_s ${FEEL_LIBRARIES} )
# target_link_libraries(feel_perf_stokes_hc ${FEEL_LIBRARIES} )

