###  CMakeLists.txt ---

#  Author(s): Christophe Prud'homme <christophe.prudhomme@ujf-grenoble.fr>
#       Date: 2010-06-12
#
#  Copyright (C) 2010 Universite Joseph Fourier (Grenoble I)
#
# Distributed under the GPL(GNU Public License):
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#
macro(OVERWITE_IF_DIFFERENT filename var)
  IF (EXISTS ${CMAKE_CURRENT_BINARY_DIR}/${filename} )
    file(READ ${CMAKE_CURRENT_BINARY_DIR}/${filename}  LAG_READ)
    if (NOT var STREQUAL LAG_READ )
      file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${filename} ${var})
    endif()
  else()
    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${filename} ${var})
  endif()
endmacro()

include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
set( CR1P0 "// this file is automatically generated
#include <stokes.hpp>
namespace Feel{
 template class Stokes<2, CrouzeixRaviart<1, Vectorial,PointSetEquiSpaced>,Lagrange<0, Scalar,Discontinuous>, Simplex>\\;
}
")
#file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_cr1p0.cpp ${CR1P0})
OVERWITE_IF_DIFFERENT("feel_perf_stokes_cr1p0.cpp" "${CR1P0}")

foreach(N 2 3 4 5)
  math (EXPR P '${N}-1')
  set( LAG "// this file is automatically generated
#include <stokes.hpp>
namespace Feel {
  template class Stokes<2, Lagrange<${N}, Vectorial>,Lagrange<${P}, Scalar>, Simplex>\\;
}
")
  OVERWITE_IF_DIFFERENT("feel_perf_stokes_p${N}p${P}.cpp" "${LAG}")
  # IF (EXISTS ${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_p${N}p${P}.cpp )
  #   file(READ ${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_p${N}p${P}.cpp  ${LAG_READ})
  #   if (NOT LAG STREQUAL LAG_READ )
  #     file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_p${N}p${P}.cpp ${LAG})
  #   endif()
  # else()
  #   file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_p${N}p${P}.cpp ${LAG})
  # endif()
  set(taylor_hood "${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_p${N}p${P}.cpp;${taylor_hood}")
endforeach()


add_executable(feel_perf_stokes  ${CMAKE_CURRENT_BINARY_DIR}/feel_perf_stokes_cr1p0.cpp ${taylor_hood}  bench.cpp)
target_link_libraries(feel_perf_stokes ${FEEL_LIBRARIES} )

configure_file(stokes.cfg stokes.cfg)




# add_executable(feel_perf_stokes_s  stokes_bench.cpp )
# add_executable(feel_perf_stokes_hc  stokes_bench_hc.cpp )
# target_link_libraries(feel_perf_stokes_s ${FEEL_LIBRARIES} )
# target_link_libraries(feel_perf_stokes_hc ${FEEL_LIBRARIES} )

