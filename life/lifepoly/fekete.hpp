/* -*- mode: c++ -*-

   This file is part of the Life library

   Author(s): Christophe Prud'homme <christophe.prudhomme@ujf-grenoble.fr>
   Date: 2006-03-03

   Copyright (C) 2006 EPFL

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
/**
   \file fekete.hpp
   \author Goncalo Pena <goncalo.pena@epfl.ch>
   \date 2006-10-02
*/
#ifndef __Fekete_H
#define __Fekete_H 1

#include <life/lifealg/glas.hpp>
#include <life/lifepoly/pointsetinterpolation.hpp>
#include <life/lifepoly/geomap.hpp>
#include <life/lifepoly/warpblend.hpp>

#include <life/lifepoly/equispaced.hpp>

#include <boost/assign/list_of.hpp>
#include <boost/assign/std/vector.hpp>

namespace Life
{
template< class Convex,
          uint16_type Order,
          typename T = double >
class PointSetFeketeSimplex : public  PointSetInterpolation<Convex::nDim, Order, T, Simplex>
{

public :

    typedef PointSetWarpBlend<Convex, Order, T> super;

    typedef T value_type;

    static const uint32_type Dim = Convex::nDim;
    static const uint16_type nPoints1D = Order+1;

    static const size_type Shape = Convex::Shape;

    static const bool is_simplex = Convex::is_simplex;
    static const bool is_simplex_product = Convex::is_simplex_product;

    typedef typename super::return_type return_type;

    typedef ublas::vector<value_type> vector_type;

    static const uint32_type topological_dimension = Convex::topological_dimension;
    static const uint32_type numPoints = super::numPoints;

    typedef Reference<Convex, Dim, Convex::nOrder, Dim, value_type> reference_convex_type;

    typedef typename reference_convex_type::points_type points_type;

    static const uint32_type nbPtsPerFace = super::nbPtsPerFace;

    typedef std::vector<uint16_type> orbits_type;

    reference_convex_type RefConv;

    PointSetFeketeSimplex( int interior = 0 )
    {
        PointSetWarpBlend<Convex, Order, T> G(interior);

        points_type final_pts = G.points();

        //Copies information about WarpBlend points
        this->setEid( G.getEid() );
        this->setPtE( G.getPtE() );

        if ( Order > 2 )
            {
                points_type Gt(Dim, nbPtsPerFace);

                Gt = innerFeketePoints();
                Gt = orderInteriorFace( Gt );

                if ( interior )
                    final_pts = Gt;
                else
                    final_pts = putInPointset ( final_pts, Gt, G.interiorRangeById(2, 0) );

            }

        this->setPoints( final_pts );

        this->setName( "fekete", Order );
    }

    ~PointSetFeketeSimplex() {}

private :

    points_type innerFeketePoints()
    {
        points_type inner_pts (Dim, nbPtsPerFace);

        std::vector< std::vector<double> > pts (nbPtsPerFace);

        using namespace boost::assign;

        switch ( Order )
            {
            case 3:
                {
                    pts[0] += -double(1.0)/double(3.0), -double(1.0)/double(3.0);
                    break;
                }

            case 4:
                {
                    pts[0] += -0.56691527068181,  -0.56691527068181;
                    pts[1] += -0.56691527068176,   0.13383054136353;
                    pts[2] +=  0.13383054136353,  -0.56691527068176;
                    break;
                }

            case 5:
                {
                    pts[0] += -0.70396105736974,  -0.70396105736974;
                    pts[1] += -0.68330215717020,  -0.15834892141496;
                    pts[2] += -0.70396105736973,   0.40792211473944;
                    pts[3] += -0.15834892141496,  -0.68330215717020;
                    pts[4] += -0.15834892141488,  -0.15834892141488;
                    pts[5] += 0.40792211473944,  -0.70396105736973;
                    break;
                }

            case 6:
                {
                    pts[0] += -0.78732906324796,  -0.78732906324796;
                    pts[1] += -0.76563816574422,  -0.36746040812917;
                    pts[2] += -0.76563816574422,   0.13309857387324;
                    pts[3] += -0.78732906324795,   0.57465812649588;
                    pts[4] += -0.36746040812916,  -0.76563816574422;
                    pts[5] += -0.33333333333333,  -0.33333333333333;
                    pts[6] += -0.36746040812908,   0.13309857387332;
                    pts[7] += 0.13309857387325,  -0.76563816574422;
                    pts[8] += 0.13309857387333,  -0.36746040812908;
                    pts[9] += 0.57465812649588,  -0.78732906324795;
                    break;
                }
            case 7:
                {
                    pts[0] += -0.84082298623964,  -0.84082298623964;
                    pts[1] += -0.82211390508912,  -0.51327071376998;
                    pts[2] += -0.81594137624368,  -0.09202931187826;
                    pts[3] += -0.82211390508912,   0.33538461885898;
                    pts[4] += -0.84082298623964,   0.68164597247925;
                    pts[5] += -0.51327071376998,  -0.82211390508912;
                    pts[6] += -0.47358179008613,  -0.47358179008613;
                    pts[7] += -0.47358179008612,  -0.05283641982773;
                    pts[8] += -0.51327071376994,   0.33538461885907;
                    pts[9] += -0.09202931187826,  -0.81594137624368;
                    pts[10] += -0.05283641982773,  -0.47358179008612;
                    pts[11] += -0.09202931187815,  -0.09202931187815;
                    pts[12] += 0.33538461885898,  -0.82211390508912;
                    pts[13] += 0.33538461885907,  -0.51327071376994;
                    pts[14] += 0.68164597247925,  -0.84082298623964;
                    break;
                }

            case 8:
                {
                    pts[0] += -0.87685156407916,  -0.87685156407916;
                    pts[1] += -0.86148748765207,  -0.61645132537670;
                    pts[2] += -0.85390818566290,  -0.26551947299886;
                    pts[3] += -0.85390818566290,   0.11942765866153;
                    pts[4] += -0.86148748765208,   0.47793881302865;
                    pts[5] += -0.87685156407916,   0.75370312815829;
                    pts[6] += -0.61645132537670,  -0.86148748765207;
                    pts[7] += -0.57955677129347,  -0.57955677129347;
                    pts[8] += -0.56726866673381,  -0.21636566663310;
                    pts[9] += -0.57955677129347,   0.15911354258695;
                    pts[10] += -0.61645132537666,   0.47793881302873;
                    pts[11] += -0.26551947299886,  -0.85390818566290;
                    pts[12] += -0.21636566663310,  -0.56726866673381;
                    pts[13] += -0.21636566663307,  -0.21636566663308;
                    pts[14] += -0.26551947299875,   0.11942765866167;
                    pts[15] += 0.11942765866153,  -0.85390818566290;
                    pts[16] += 0.15911354258695,  -0.57955677129348;
                    pts[17] += 0.11942765866167,  -0.26551947299875;
                    pts[18] += 0.47793881302865,  -0.86148748765208;
                    pts[19] += 0.47793881302873,  -0.61645132537666;
                    pts[20] += 0.75370312815829,  -0.87685156407916;
                    break;
                }

            case 9:
                {
                    pts[0] += -0.90213086089054,  -0.90213086089054;
                    pts[1] += -0.88964838416699,  -0.69121961117910;
                    pts[2] += -0.88228702421144,  -0.39795157802548;
                    pts[3] += -0.87983505766704,  -0.06008247116661;
                    pts[4] += -0.88228702421145,   0.28023860223671;
                    pts[5] += -0.88964838416700,   0.58086799534599;
                    pts[6] += -0.90213086089054,   0.80426172178106;
                    pts[7] += -0.69121961117910,  -0.88964838416699;
                    pts[8] += -0.65913635981371,  -0.65913635981371;
                    pts[9] += -0.64313248238413,  -0.34951302008763;
                    pts[10] += -0.64313248238413,  -0.00735449752827;
                    pts[11] += -0.65913635981372,   0.31827271962743;
                    pts[12] += -0.69121961117906,   0.58086799534605;
                    pts[13] += -0.39795157802548,  -0.88228702421144;
                    pts[14] += -0.34951302008763,  -0.64313248238413;
                    pts[15] += -0.33333333333332,  -0.33333333333332;
                    pts[16] += -0.34951302008761,  -0.00735449752823;
                    pts[17] += -0.39795157802539,   0.28023860223685;
                    pts[18] += -0.06008247116661,  -0.87983505766704;
                    pts[19] += -0.00735449752827,  -0.64313248238413;
                    pts[20] += -0.00735449752823,  -0.34951302008761;
                    pts[21] += -0.06008247116647,  -0.06008247116647;
                    pts[22] += 0.28023860223671,  -0.88228702421145;
                    pts[23] += 0.31827271962743,  -0.65913635981372;
                    pts[24] += 0.28023860223685,  -0.39795157802539;
                    pts[25] += 0.58086799534599,  -0.88964838416700;
                    pts[26] += 0.58086799534606,  -0.69121961117906;
                    pts[27] += 0.80426172178105,  -0.90213086089054;
                    break;
                }

            case 10:
                {
                    pts[0] += -0.92048460331030,  -0.92048460331030;
                    pts[1] += -0.91031906180223,  -0.74673426893043;
                    pts[2] += -0.90368311273873,  -0.49974467617868;
                    pts[3] += -0.90037330986960,  -0.20555462327485;
                    pts[4] += -0.90037330986960,   0.10592793314416;
                    pts[5] += -0.90368311273874,   0.40342778891721;
                    pts[6] += -0.91031906180224,   0.65705333073257;
                    pts[7] += -0.92048460331029,   0.84096920662056;
                    pts[8] += -0.74673426893043,  -0.91031906180223;
                    pts[9] += -0.71946608690608,  -0.71946608690608;
                    pts[10] += -0.70317998950013,  -0.45562635188829;
                    pts[11] += -0.69774462655402,  -0.15112768672302;
                    pts[12] += -0.70317998950014,   0.15880634138839;
                    pts[13] += -0.71946608690608,   0.43893217381214;
                    pts[14] += -0.74673426893040,   0.65705333073263;
                    pts[15] += -0.49974467617868,  -0.90368311273873;
                    pts[16] += -0.45562635188829,  -0.70317998950013;
                    pts[17] += -0.43353205185788,  -0.43353205185788;
                    pts[18] += -0.43353205185788,  -0.13293589628420;
                    pts[19] += -0.45562635188828,   0.15880634138844;
                    pts[20] += -0.49974467617860,   0.40342778891734;
                    pts[21] += -0.20555462327485,  -0.90037330986960;
                    pts[22] += -0.15112768672302,  -0.69774462655402;
                    pts[23] += -0.13293589628420,  -0.43353205185788;
                    pts[24] += -0.15112768672297,  -0.15112768672297;
                    pts[25] += -0.20555462327471,   0.10592793314432;
                    pts[26] += 0.10592793314416,  -0.90037330986960;
                    pts[27] += 0.15880634138839,  -0.70317998950014;
                    pts[28] += 0.15880634138844,  -0.45562635188828;
                    pts[29] += 0.10592793314433,  -0.20555462327471;
                    pts[30] += 0.40342778891721,  -0.90368311273874;
                    pts[31] += 0.43893217381214,  -0.71946608690608;
                    pts[32] += 0.40342778891734,  -0.49974467617860;
                    pts[33] += 0.65705333073257,  -0.91031906180224;
                    pts[34] += 0.65705333073263,  -0.74673426893040;
                    pts[35] += 0.84096920662057,  -0.92048460331029;
                    break;
                }

            case 11:
                {
                    pts[0] += -0.93419741186465,  -0.93419741186465;
                    pts[1] += -0.92585853042642,  -0.78889395310686;
                    pts[2] += -0.92004713372379,  -0.57896021089317;
                    pts[3] += -0.91657536802907,  -0.32287712859100;
                    pts[4] += -0.91541948345695,  -0.04229025827169;
                    pts[5] += -0.91657536802908,   0.23945249661978;
                    pts[6] += -0.92004713372380,   0.49900734461678;
                    pts[7] += -0.92585853042643,   0.71475248353321;
                    pts[8] += -0.93419741186464,   0.86839482372927;
                    pts[9] += -0.78889395310686,  -0.92585853042642;
                    pts[10] += -0.76586385161185,  -0.76586385161185;
                    pts[11] += -0.75061884370235,  -0.54002954143936;
                    pts[12] += -0.74299230872912,  -0.27138925307920;
                    pts[13] += -0.74299230872913,   0.01438156180823;
                    pts[14] += -0.75061884370236,   0.29064838514166;
                    pts[15] += -0.76586385161185,   0.53172770322367;
                    pts[16] += -0.78889395310684,   0.71475248353326;
                    pts[17] += -0.57896021089317,  -0.92004713372379;
                    pts[18] += -0.54002954143936,  -0.75061884370235;
                    pts[19] += -0.51666043008205,  -0.51666043008205;
                    pts[20] += -0.50885432717319,  -0.24557283641339;
                    pts[21] += -0.51666043008206,   0.03332086016413;
                    pts[22] += -0.54002954143935,   0.29064838514172;
                    pts[23] += -0.57896021089310,   0.49900734461689;
                    pts[24] += -0.32287712859100,  -0.91657536802907;
                    pts[25] += -0.27138925307920,  -0.74299230872912;
                    pts[26] += -0.24557283641339,  -0.50885432717319;
                    pts[27] += -0.24557283641338,  -0.24557283641338;
                    pts[28] += -0.27138925307915,   0.01438156180831;
                    pts[29] += -0.32287712859087,   0.23945249661995;
                    pts[30] += -0.04229025827169,  -0.91541948345695;
                    pts[31] += 0.01438156180823,  -0.74299230872913;
                    pts[32] += 0.03332086016413,  -0.51666043008206;
                    pts[33] += 0.01438156180831,  -0.27138925307915;
                    pts[34] += -0.04229025827152,  -0.04229025827152;
                    pts[35] += 0.23945249661978,  -0.91657536802908;
                    pts[36] += 0.29064838514166,  -0.75061884370236;
                    pts[37] += 0.29064838514172,  -0.54002954143935;
                    pts[38] += 0.23945249661995,  -0.32287712859086;
                    pts[39] += 0.49900734461678,  -0.92004713372380;
                    pts[40] += 0.53172770322367,  -0.76586385161185;
                    pts[41] += 0.49900734461689,  -0.57896021089310;
                    pts[42] += 0.71475248353321,  -0.92585853042643;
                    pts[43] += 0.71475248353325,  -0.78889395310684;
                    pts[44] += 0.86839482372927,  -0.93419741186464;
                    break;
                }

            case 12:
                {
                    pts[0] += -0.94469401093262,  -0.94469401093262;
                    pts[1] += -0.93779230300363,  -0.82156579691502;
                    pts[2] += -0.93275871611165,  -0.64146182355647;
                    pts[3] += -0.92942425217792,  -0.41783682475382;
                    pts[4] += -0.92776010180019,  -0.16666721690721;
                    pts[5] += -0.92776010180019,   0.09442731870703;
                    pts[6] += -0.92942425217792,   0.34726107693146;
                    pts[7] += -0.93275871611166,   0.57422053966795;
                    pts[8] += -0.93779230300364,   0.75935809991858;
                    pts[9] += -0.94469401093262,   0.88938802186522;
                    pts[10] += -0.82156579691502,  -0.93779230300363;
                    pts[11] += -0.80209885476552,  -0.80209885476552;
                    pts[12] += -0.78832747387985,  -0.60754815990668;
                    pts[13] += -0.78006903335809,  -0.37095183789408;
                    pts[14] += -0.77731536406671,  -0.11134231796672;
                    pts[15] += -0.78006903335810,   0.15102087125205;
                    pts[16] += -0.78832747387987,   0.39587563378647;
                    pts[17] += -0.80209885476552,   0.60419770953101;
                    pts[18] += -0.82156579691500,   0.75935809991862;
                    pts[19] += -0.64146182355647,  -0.93275871611165;
                    pts[20] += -0.60754815990668,  -0.78832747387985;
                    pts[21] += -0.58496293219889,  -0.58496293219889;
                    pts[22] += -0.57364748757468,  -0.34275399535826;
                    pts[23] += -0.57364748757469,  -0.08359851706705;
                    pts[24] += -0.58496293219890,   0.16992586439779;
                    pts[25] += -0.60754815990667,   0.39587563378653;
                    pts[26] += -0.64146182355641,   0.57422053966806;
                    pts[27] += -0.41783682475382,  -0.92942425217792;
                    pts[28] += -0.37095183789408,  -0.78006903335809;
                    pts[29] += -0.34275399535826,  -0.57364748757468;
                    pts[30] += -0.33333333333332,  -0.33333333333332;
                    pts[31] += -0.34275399535825,  -0.08359851706702;
                    pts[32] += -0.37095183789403,   0.15102087125216;
                    pts[33] += -0.41783682475370,   0.34726107693163;
                    pts[34] += -0.16666721690721,  -0.92776010180019;
                    pts[35] += -0.11134231796672,  -0.77731536406671;
                    pts[36] += -0.08359851706705,  -0.57364748757469;
                    pts[37] += -0.08359851706702,  -0.34275399535825;
                    pts[38] += -0.11134231796662,  -0.11134231796663;
                    pts[39] += -0.16666721690703,   0.09442731870723;
                    pts[40] += 0.09442731870703,  -0.92776010180019;
                    pts[41] += 0.15102087125205,  -0.78006903335810;
                    pts[42] += 0.16992586439779,  -0.58496293219890;
                    pts[43] += 0.15102087125216,  -0.37095183789403;
                    pts[44] += 0.09442731870723,  -0.16666721690703;
                    pts[45] += 0.34726107693146,  -0.92942425217792;
                    pts[46] += 0.39587563378647,  -0.78832747387987;
                    pts[47] += 0.39587563378653,  -0.60754815990667;
                    pts[48] += 0.34726107693163,  -0.41783682475370;
                    pts[49] += 0.57422053966795,  -0.93275871611166;
                    pts[50] += 0.60419770953101,  -0.80209885476552;
                    pts[51] += 0.57422053966806,  -0.64146182355641;
                    pts[52] += 0.75935809991858,  -0.93779230300364;
                    pts[53] += 0.75935809991863,  -0.82156579691500;
                    pts[54] += 0.88938802186522,  -0.94469401093262;
                    break;
                }


            case 13:
                {
                    pts[0] += -0.95289663518941,  -0.95289663518941;
                    pts[1] += -0.94713138458309,  -0.84734334275863;
                    pts[2] += -0.94278402499223,  -0.69145347026266;
                    pts[3] += -0.93970476635276,  -0.49524507185896;
                    pts[4] += -0.93786244737032,  -0.27073018406781;
                    pts[5] += -0.93724847727672,  -0.03137576136184;
                    pts[6] += -0.93786244737032,   0.20859263143777;
                    pts[7] += -0.93970476635277,   0.43494983821146;
                    pts[8] += -0.94278402499224,   0.63423749525475;
                    pts[9] += -0.94713138458310,   0.79447472734166;
                    pts[10] += -0.95289663518940,   0.90579327037879;
                    pts[11] += -0.84734334275863,  -0.94713138458309;
                    pts[12] += -0.83082136214816,  -0.83082136214816;
                    pts[13] += -0.81857972727811,  -0.66203358552452;
                    pts[14] += -0.81043356134165,  -0.45330807922072;
                    pts[15] += -0.80636051522622,  -0.21899234263960;
                    pts[16] += -0.80636051522623,   0.02535285786563;
                    pts[17] += -0.81043356134167,   0.26374164056223;
                    pts[18] += -0.81857972727812,   0.48061331280256;
                    pts[19] += -0.83082136214816,   0.66164272429629;
                    pts[20] += -0.84734334275861,   0.79447472734170;
                    pts[21] += -0.69145347026267,  -0.94278402499223;
                    pts[22] += -0.66203358552452,  -0.81857972727811;
                    pts[23] += -0.64107740891760,  -0.64107740891760;
                    pts[24] += -0.62848458160992,  -0.42530680250089;
                    pts[25] += -0.62428233247813,  -0.18785883376095;
                    pts[26] += -0.62848458160993,   0.05379138411080;
                    pts[27] += -0.64107740891762,   0.28215481783521;
                    pts[28] += -0.66203358552451,   0.48061331280262;
                    pts[29] += -0.69145347026261,   0.63423749525485;
                    pts[30] += -0.49524507185896,  -0.93970476635276;
                    pts[31] += -0.45330807922072,  -0.81043356134165;
                    pts[32] += -0.42530680250089,  -0.62848458160992;
                    pts[33] += -0.41127045235456,  -0.41127045235456;
                    pts[34] += -0.41127045235456,  -0.17745909529083;
                    pts[35] += -0.42530680250088,   0.05379138411085;
                    pts[36] += -0.45330807922067,   0.26374164056235;
                    pts[37] += -0.49524507185885,   0.43494983821162;
                    pts[38] += -0.27073018406781,  -0.93786244737032;
                    pts[39] += -0.21899234263960,  -0.80636051522622;
                    pts[40] += -0.18785883376095,  -0.62428233247813;
                    pts[41] += -0.17745909529083,  -0.41127045235456;
                    pts[42] += -0.18785883376091,  -0.18785883376091;
                    pts[43] += -0.21899234263950,   0.02535285786576;
                    pts[44] += -0.27073018406764,   0.20859263143797;
                    pts[45] += -0.03137576136184,  -0.93724847727672;
                    pts[46] += 0.02535285786563,  -0.80636051522623;
                    pts[47] += 0.05379138411080,  -0.62848458160993;
                    pts[48] += 0.05379138411085,  -0.42530680250088;
                    pts[49] += 0.02535285786576,  -0.21899234263950;
                    pts[50] += -0.03137576136163,  -0.03137576136163;
                    pts[51] += 0.20859263143777,  -0.93786244737032;
                    pts[52] += 0.26374164056223,  -0.81043356134167;
                    pts[53] += 0.28215481783521,  -0.64107740891762;
                    pts[54] += 0.26374164056235,  -0.45330807922067;
                    pts[55] += 0.20859263143797,  -0.27073018406764;
                    pts[56] += 0.43494983821146,  -0.93970476635277;
                    pts[57] += 0.48061331280256,  -0.81857972727812;
                    pts[58] += 0.48061331280262,  -0.66203358552451;
                    pts[59] += 0.43494983821162,  -0.49524507185885;
                    pts[60] += 0.63423749525475,  -0.94278402499224;
                    pts[61] += 0.66164272429629,  -0.83082136214816;
                    pts[62] += 0.63423749525485,  -0.69145347026261;
                    pts[63] += 0.79447472734166,  -0.94713138458310;
                    pts[64] += 0.79447472734170,  -0.84734334275861;
                    pts[65] += 0.90579327037879,  -0.95289663518940;
                    break;
                }


            case 14:
                {
                    pts[0] += -0.95942190867292,  -0.95942190867292;
                    pts[1] += -0.95456251897417,  -0.86800682026105;
                    pts[2] += -0.95080371489132,  -0.73195757027318;
                    pts[3] += -0.94801388537419,  -0.55888291585085;
                    pts[4] += -0.94616130071378,  -0.35796944884073;
                    pts[5] += -0.94523574199437,  -0.13964494172881;
                    pts[6] += -0.94523574199437,   0.08488068372275;
                    pts[7] += -0.94616130071378,   0.30413074955415;
                    pts[8] += -0.94801388537419,   0.50689680122479;
                    pts[9] += -0.95080371489133,   0.68276128516436;
                    pts[10] += -0.95456251897417,   0.82256933923516;
                    pts[11] += -0.95942190867292,   0.91884381734582;
                    pts[12] += -0.86800682026105,  -0.95456251897417;
                    pts[13] += -0.85390723570233,  -0.85390723570233;
                    pts[14] += -0.84309944294404,  -0.70643213809322;
                    pts[15] += -0.83540464574990,  -0.52167525764971;
                    pts[16] += -0.83079060075336,  -0.31062706414835;
                    pts[17] += -0.82925208444001,  -0.08537395778012;
                    pts[18] += -0.83079060075336,   0.14141766490148;
                    pts[19] += -0.83540464574992,   0.35707990339946;
                    pts[20] += -0.84309944294405,   0.54953158103718;
                    pts[21] += -0.85390723570233,   0.70781447140463;
                    pts[22] += -0.86800682026103,   0.82256933923519;
                    pts[23] += -0.73195757027318,  -0.95080371489132;
                    pts[24] += -0.70643213809322,  -0.84309944294404;
                    pts[25] += -0.68737493439467,  -0.68737493439467;
                    pts[26] += -0.67466069850439,  -0.49508559338126;
                    pts[27] += -0.66829668735870,  -0.27898474529856;
                    pts[28] += -0.66829668735870,  -0.05271856734279;
                    pts[29] += -0.67466069850440,   0.16974629188561;
                    pts[30] += -0.68737493439468,   0.37474986878933;
                    pts[31] += -0.70643213809321,   0.54953158103724;
                    pts[32] += -0.73195757027313,   0.68276128516444;
                    pts[33] += -0.55888291585084,  -0.94801388537419;
                    pts[34] += -0.52167525764971,  -0.83540464574990;
                    pts[35] += -0.49508559338126,  -0.67466069850439;
                    pts[36] += -0.47909307681934,  -0.47909307681934;
                    pts[37] += -0.47375454271445,  -0.26312272864275;
                    pts[38] += -0.47909307681934,  -0.04181384636127;
                    pts[39] += -0.49508559338125,   0.16974629188567;
                    pts[40] += -0.52167525764967,   0.35707990339959;
                    pts[41] += -0.55888291585075,   0.50689680122494;
                    pts[42] += -0.35796944884073,  -0.94616130071378;
                    pts[43] += -0.31062706414835,  -0.83079060075336;
                    pts[44] += -0.27898474529856,  -0.66829668735870;
                    pts[45] += -0.26312272864275,  -0.47375454271445;
                    pts[46] += -0.26312272864274,  -0.26312272864274;
                    pts[47] += -0.27898474529852,  -0.05271856734273;
                    pts[48] += -0.31062706414825,   0.14141766490164;
                    pts[49] += -0.35796944884057,   0.30413074955436;
                    pts[50] += -0.13964494172881,  -0.94523574199437;
                    pts[51] += -0.08537395778012,  -0.82925208444001;
                    pts[52] += -0.05271856734279,  -0.66829668735870;
                    pts[53] += -0.04181384636127,  -0.47909307681934;
                    pts[54] += -0.05271856734273,  -0.27898474529852;
                    pts[55] += -0.08537395777998,  -0.08537395777998;
                    pts[56] += -0.13964494172860,   0.08488068372298;
                    pts[57] += 0.08488068372275,  -0.94523574199437;
                    pts[58] += 0.14141766490148,  -0.83079060075336;
                    pts[59] += 0.16974629188562,  -0.67466069850440;
                    pts[60] += 0.16974629188567,  -0.49508559338125;
                    pts[61] += 0.14141766490164,  -0.31062706414825;
                    pts[62] += 0.08488068372298,  -0.13964494172860;
                    pts[63] += 0.30413074955415,  -0.94616130071378;
                    pts[64] += 0.35707990339946,  -0.83540464574992;
                    pts[65] += 0.37474986878933,  -0.68737493439468;
                    pts[66] += 0.35707990339959,  -0.52167525764967;
                    pts[67] += 0.30413074955436,  -0.35796944884057;
                    pts[68] += 0.50689680122479,  -0.94801388537419;
                    pts[69] += 0.54953158103718,  -0.84309944294405;
                    pts[70] += 0.54953158103724,  -0.70643213809321;
                    pts[71] += 0.50689680122494,  -0.55888291585075;
                    pts[72] += 0.68276128516436,  -0.95080371489133;
                    pts[73] += 0.70781447140463,  -0.85390723570233;
                    pts[74] += 0.68276128516445,  -0.73195757027313;
                    pts[75] += 0.82256933923516,  -0.95456251897417;
                    pts[76] += 0.82256933923519,  -0.86800682026103;
                    pts[77] += 0.91884381734582,  -0.95942190867292;
                    break;
                }

            default:
                {
                }
            }

        for ( uint32_type i = 0; i<nbPtsPerFace; ++i)
            {
                inner_pts(0,i) = pts[i][0];
                inner_pts(1,i) = pts[i][1];
            }


        return inner_pts;
    }

    points_type putInPointset (points_type final_pts, points_type pts, std::pair<uint16_type, uint16_type> position )
    {
        ublas::subrange(final_pts, 0, 2, position.first, position.second) = pts;

        return final_pts;
    }

    template<int n>
    static bool order(vector_type a, vector_type b) {return a(n) < b(n);}

    points_type orderInteriorFace( points_type pts )
    {
        std::vector<vector_type> aux(pts.size2());

        for (uint16_type i=0; i<pts.size2(); i++)
            aux[i] = ublas::column(pts, i);

        std::sort(aux.begin(), aux.end(), &order<1>);

        for (uint16_type p=0, i=Order-3; i>0; i--)
            {
                std::sort(aux.begin()+p, aux.begin()+p+i+1, &order<0>);
                p += i+1;
            }

        for (uint16_type i=0; i<pts.size2(); i++)
            ublas::column(pts, i) = aux[i];

        return pts;
    }
};

/**
 * \class Fekete point set class for simplices and simplex products
 */
template< class Convex,
          uint16_type Order,
          typename T = double >
class PointSetFekete : public mpl::if_<mpl::equal_to<mpl::bool_<Convex::is_simplex_product>, mpl::bool_<true> >,
                                       mpl::identity<PointSetGaussLobatto<Convex,Order,T> >,
                                       mpl::identity<PointSetFeketeSimplex<Convex,Order,T> > >::type::type
{
    typedef typename mpl::if_<mpl::equal_to<mpl::bool_<Convex::is_simplex_product>, mpl::bool_<true> >,
                              mpl::identity<PointSetGaussLobatto<Convex,Order,T> >,
                              mpl::identity<PointSetFeketeSimplex<Convex,Order,T> > >::type::type super;
public:
    PointSetFekete( int interior = 0 ) : super( interior ) {}
};

} // Life
#endif /* __Fekete_H */
