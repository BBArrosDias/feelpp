#+OPTIONS: LaTeX:t

* Introduction
Feel++ is a C++ library for arbitrary order Galerkin methods (e.g. finite and spectral element methods ) continuous or discontinuous in 1D 2D and 3D. The objectives of this framework is quite ambitious; ambitions which could be express in various ways such as :
 - the creation of a versatile mathematical kernel solving easily problems using different techniques thus allowing testing and comparing methods, e.g. cG versus dG,
 - the creation of a small and manageable library which shall nevertheless encompass a wide range of numerical methods and techniques,
 - build mathematical software that follows closely the mathematical abstractions associated with partial differential equations (PDE)
 - the creation of a library entirely in C++ allowing to create C++ complex and typically multi-physics applications such as fluid-structure interaction or mass transport in haemodynamic

SOme basic installation procedure are available in the INSTALL.org file.

* Features
 - 1D 2D and 3D (including high order) geometries and also lower topological dimension 1D(curve) in 2D and 3D or 2D(surface) in 3D
 - continuous and discontinuous arbitrary order Galerkin Methods in 1D, 2D and 3D including finite and spectral element methods
 - domain specific embedded language in C++ for variational formulations
 - interfaced with [http://www.mcs.anl.gov/petsc/ PETSc] for linear and non-linear solvers
 - seamless parallel computations using PETSc
 - interfaced with [http://www.grycap.upv.es/slepc/ SLEPc] for large-scale sparse standard and generalized eigenvalue  solvers
 - supports [http://www.geuz.org/gmsh Gmsh] for mesh generation
 - supports [http://www.geuz.org/gmsh Gmsh] for post-processing (including on high order geometries)
 - supports [http://www.paraview.org Paraview] for post-processing

* Documentation

 - [http://feelpp.googlecode.com/files/feel-manual.pdf Feel++ PDF Manual]
 - [http://docs.feelpp.googlecode.com/git/html/index.html Feel++ Online Reference Manual]
 - [http://code.google.com/p/feelpp/w/list Feel++ Wiki]

* Examples

** Laplacian in 2D using P3 Lagrange basis functions

Here is a full example to solve $-\Delta u = f in \Omega,\quad u=g on \partial \Omega$
#+include: "quickstart/laplacian.cpp" src C++ :lines "30-"

** Bratu equation in 2D

Here is a full example to solve $-\Delta u + e^u = 0 in \Omega,\quad u=0 on \partial \Omega$
#+include: "doc/manual/nonlinear/bratu.cpp" src C++ :lines "30-"

