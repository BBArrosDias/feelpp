// -*- mode: c++; coding: utf-8 -*-
namespace Feel
{
/*! \page ManipulatingFunctionSpaces Manipulating Function Spaces

\talbeofcontents

\li \b Previous: \ref ComputingIntegrals
\li \b Next: \ref WritingVariationalFormulations


\section FunctionSpaceDefinition Defining function spaces and functions



\dontinclude myfunctionspace.cpp

typedef

\skip marker1
\until endmarker1

P0 FunctionSpace typedef

\skip marker2
\until endmarker2

Now we turn to the instantiation of the function space \f$ X_h \f$ of type \c
functionspace_type. We have already instantiated a \c mesh (see this \ref
ManipulatingMeshes "Section") of type \c mesh_ptrtype. The code looks like this

\dontinclude myfunctionspace.cpp
\skip marker31
\until endmarker31

Then we instantiate \f$ X_h\f$ using \c space_type::New() static member function
and obtain a \c functionspace_ptrtype.

\skipline space_ptrtype Xh

We are now able to instantiate elements of the \c FunctionSpace \f$ X_h\f$. Two
ways are presented, one with the \c auto keyword allowing to infer automatically
the type of \f$ X_h\f$ elements

\skipline auto u

and one knowing the actual type of the element

\skipline element_type v

\note The strings \c "u" and \c "v" are the name we give to these elements of
\f$ X_h\f$.

\section FunctionSpaceUse Using functions spaces and functions

\subsection Projection Projection

\dontinclude myfunctionspace.cpp

First, we define some mathematical expression/functions
\f{eqnarray}{
g(x,y,z) &=& \sin(\pi x/2)\ \cos(\pi y/2)\ \cos(\pi*z/2) \\
f(x,y,z) &=& (1-x^2)\ (1-y^2)\ (1-z^2)\ (x^2+y^2+z^2)^{\alpha/2.0},\quad \alpha=3
\f}

They are implemented using the new <a href="http://en.wikipedia.org/wiki/C%2B%2B0x#Type_inference">auto</a> C++ keyword to
infer the type of expression automatically.

\skip marker4
\until endmarker4

Then we build the interpolant (Lagrange interpolant in this case since we chose
Lagrange basis function), by calling the \c vf::project() function which can be
applied on all or parts of the \c mesh thanks to the mesh iterators such as
\c elements(mesh) or \c markedelements(mesh,marker). The return object is the
interpolant of the function in the space \f$ X_h \f$ given as an argument to
\c vf::project().

\skip marker5
\until endmarker5

\subsection FunctionSpaceNorm Norm computation

It is easy to compute norms

\skip marker6
\until endmarker6

\subsection Interpolation Interpolation

\subsection Saving Exporting to Paraview or Gmsh

projection
\skip marker7
\until endmarker7


\skip marker5
\until endmarker5

\section ManipulatingFunctionSpacesExec Execution

\subsection ManipulatingFunctionSpacesExecSimplex Execution on a Simplex

We execute this example on a simplex domain an export to the Gmsh format:

\verbatim
feel_doc_myfunctionspace --shape="simplex"--nochdir --exporter-format=gmsh
\endverbatim

the output log of the execution of this example gives

\include myfunctionspace-simplex.out

Here are the graphical outputs on the d-simplex, d=1,2,3:

\htmlonly <table><tr><td> \endhtmlonly
\image html myfunctionspace-simplex-1-f.png "f on the Line" width=30%
\htmlonly </td><td> \endhtmlonly
\image html myfunctionspace-simplex-2-f.png "f on the Triangle" width=30%
\htmlonly </td><td> \endhtmlonly
\image html myfunctionspace-simplex-3-f.png "f on the Tetrahedron" width=30%
\htmlonly </td></tr></table> \endhtmlonly

\htmlonly <table><tr><td> \endhtmlonly
\image html myfunctionspace-simplex-1-g.png "g on the Line" width=30%
\htmlonly </td><td> \endhtmlonly
\image html myfunctionspace-simplex-2-g.png "g on the Triangle" width=30%
\htmlonly </td><td> \endhtmlonly
\image html myfunctionspace-simplex-3-g.png "g on the Tetrahedron" width=30%
\htmlonly </td></tr></table> \endhtmlonly


\subsection ManipulatingFunctionSpacesExecHypercube Execution on a Hypercube



We execute this example on a hypercube domain an export to the Gmsh format:

\verbatim
feel_doc_myfunctionspace --shape="hypercube"--nochdir --exporter-format=gmsh
\endverbatim

the output log of the execution of this example gives

\include myfunctionspace-hypercube.out

Here are the graphical outputs on the d-hypercube, d=1,2,3:

\htmlonly <table><tr><td> \endhtmlonly
\image html myfunctionspace-hypercube-1-f.png "f plot on Line" width=30%
\htmlonly </td><td> \endhtmlonly
\image html myfunctionspace-hypercube-2-f.png "f plot on Unit Square" width=30%
\htmlonly </td><td> \endhtmlonly
\image html myfunctionspace-hypercube-3-f.png "f plot on Unit Cube" width=30%
\htmlonly </td></tr></table> \endhtmlonly

\htmlonly <table><tr><td> \endhtmlonly
\image html myfunctionspace-hypercube-1-g.png "g plot on Line" width=30%
\htmlonly </td><td> \endhtmlonly
\image html myfunctionspace-hypercube-2-g.png "g plot on Unit Square" width=30%
\htmlonly </td><td> \endhtmlonly
\image html myfunctionspace-hypercube-3-g.png "g plot on Unit Cube" width=30%
\htmlonly </td></tr></table> \endhtmlonly



\li \b Previous: \ref ComputingIntegrals
\li \b Next: \ref WritingVariationalFormulations

*/
}
