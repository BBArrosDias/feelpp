/* -*- mode: c++; coding: utf-8 -*- */

namespace Life
{
/*! \mainpage Feel++: Finite Element Embedded Library (or Language) in C++

Life is a unified C++ implementation of Galerkin methods (finite and spectral
element methods) in 1D, 2D And 3D to solve partial differential equations.

\section toc Table of  Contents

  - \ref Introduction
  - \b Tutorial
    - \ref ProgEnv
    - \ref CreatingApplications
    - \ref ManipulatingMeshes
    - \ref ManipulatingFunctionSpaces
    - \ref SolvingLinearAlgebra
    - \ref WritingVariationalFormulations
  - \b Examples
    - \ref SolvingNonlinearEquations

<hr>
\htmlonly
<center>
<a href="http://creativecommons.org/licenses/LGPL/2.1/"><img alt="CC-GNU LGPL" border="0" src="http://creativecommons.org/images/public/cc-LGPL-a.png" /></a>
</center>
\endhtmlonly

*/
/*! \page Introduction Introduction

\section General Objectives

The objectives of this framework is quite ambitious; ambitions which
could be express in various ways such as :

 1. the creation of a versatile mathematical kernel solving easily
 problems using different techniques thus allowing testing and
 comparing methods, e.g. cG versus dG,

 2. the creation of a '''small''' and '''manageable''' library which
 shall nevertheless encompass a wide range of numerical methods and
 techniques,

 3. build mathematical software that follows closely the mathematical
 abstractions associated with partial differential equations
 (PDE)(which is often not the case, for example the design
 could be physics oriented)

 4. the creation of a library entirely in ''C++'' allowing to create
 ''C++'' complex and typically multi-physics applications such as
 fluid-structure interaction or mass transport in
 haemodynamics (the rationale being that these applications
 are computing intensive and the use of an interpreted language such
 as python would not be satisfying though in many simpler cases that
 would simplify and accelerate the development.)



Life was initially developed at École Polytechnique Fédérale de
Lausanne(Suisse) and is now a joint effort between UniversitÃ© Joseph Fourier
(Grenoble) and École Polytechnique Fédérale de Lausanne(Suisse). The
author is

 - Christophe Prud'homme <christophe.prudhomme#ujf-grenoble.fr>
   (Lab. Jean Kuntzmann, Université Joseph Fourier, France)

\section contributors Contributors

 - Goncalo Pena contributed the dof handling in 3D when polynomial
   order is > 2, a 2D Fekete point set class, the 3D warpblend point
   set

 - Gilles Steiner contributed the boundary adapted polynomial classes
   and in various places in the polynomial library

 - Christoph Winkelmann contributed bug reports and a few bug fixes

 - Klaus Sapelza contributed the matrix/vector  wrappers for Trilinos::Epetra

 - Benjamin Stamm contributed bug reports


*/
}
