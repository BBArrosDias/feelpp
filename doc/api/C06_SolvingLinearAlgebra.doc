namespace Feel
{
/*! \page SolvingLinearAlgebra Solving Linear Algebra Problems

\tableofcontents

\li \b Previous: \ref WritingVariationalFormulations

Feel supports three different linear algebra environments that we
shall call \emph Backend .

 - Petsc (see BackendPetsc)
 - Trilinos (see BackendTrilinos)


\section ChoosingBackend Choosing a linear algebra backend

To select a backend in order to solve a linear system, we instantiate
the <tt>Backend</tt> class associated.

\code
#include <feel/feelalg/backend.hpp>
boost::shared_ptr<Backend<double> > backend =
     Backend<double>::build( BACKEND_PETSC );
\endcode

The backend provides an interface to solve
\f[
  A x = b
\f]
where \f$A\f$ is a \f$n \times n \f$ sparse matrix and \f$x,b\f$ vectors of size \f$n\f$.
The backend defines the \cpp types for  each of these, e.g.
\code
Backend<double>::sparse_matrix_type A;
Backend<double>::vector_type x,b;
\endcode
\noindent
In practice, we use the <tt>boost::shared_ptr<></tt> shared pointer
to ensure that we won't get memory leaks. The backends provide a
corresponding <tt>typedef</tt>


\code
Backend<double>::sparse_matrix_ptrtype A( backend->newMatrix( Xh, Yh ) );
Backend<double>::vector_ptrtype x( backend->newVector( Yh ) );
Backend<double>::vector_ptrtype b( backend->newVector( Xh ) );
\endcode

where \f$X_h\f$ and \f$Y_h\f$ are function spaces providing the number of
degrees of freedom that will define the size of the matrix and vectors
thanks to the helpers functions <tt>Backend::newMatrix()</tt> and
<tt>Backend::newVector</tt>. In a parallel setting, the
local/global processor mapping would be passed down by the function
spaces.

\section MatrixVectors Defining and using matrices and vectors

\section Solving

\li \b Previous: \ref WritingVariationalFormulations

*/
}
