namespace Life
{
/*! \page WritingVariationalFormulations Writing Variational Formulations

\ingroup Tutorial
\li \b Previous: \ref SolvingLinearAlgebra

\section ComputingIntegrals Computing integrals

We would like to compute some integrals on a domain of \f$\Omega=[0,1]^d\ \subset\ \mathbb{R}^d\f$
and parts of the domain, i.e. subregions and (parts of) boundary.

Once we have defined the computational mesh, we would like to compute
the area of the domain. We form the integral \f$\int_\Omega 1\f$, the code
reads as follows

\dontinclude myintegrals.cpp
\skip marker1
\until endmarker1

<tt>elements(mesh)</tt> returns a pair of iterators over the
elements owned by the current processor, <tt>im</tt> is an instance
of the <tt>im_type</tt> which provides a quadrature method to
integrate exactly polynomials up to degree 2. In our case integrating
constant(degree 0) would have sufficed, but we will reuse
<tt>im</tt> later. Now that we have computed the integral of 1 over
the region of \f$\Omega\f$ current processor (ie the area of the domain
owned by the processor), we want to compute the area of \f$\Omega\f$. To
do that we collect the integrals on all processors using a
<tt>reduce</tt> MPI operation and sum all contributions. We have
used here the Boost.MPI library that provides an extremely powerful
\cpp wrapper around the MPI library. The code reads

\skip marker2
\until endmarker2


Finally, we print to the log file the result of the local and global
integral calculation. Another calculation is for example to compute
the perimeter of the domain

\skip marker3
\until endmarker3


the main difference with the domain area computation resides in the
elements with are iterating on: here we are iterating on the boundary
faces of the domain to compute the integral using
<tt>boundaryfaces(mesh)</tt> to provide the pairs of iterators.


Now say that we want to compute
\f[
  \int_\Omega x^2 + y^2 dx dy.
\f]
The Finite Element Embedded Language (FEEL++) language provides the
keyword <tt>Px()</tt> and <tt>Py()</tt> to denote the \f$x\f$ and
\f$y\f$ coordinates like in equation above.  The code reads then

\skip marker4
\until endmarker4

Note that in this case, we really require the use of a quadrature that
integrates exactly order 2 polynomials.

Let's run now the tutrial example <tt>myintegrals</tt>. The results are stored
in the log file under <tt>~/life/myintegrals/</tt>.

\verbatim
> cat ~/life/myintegrals/Simplex_2_1/h_0.5/myintegrals-1.0
myintegrals-1.0 is opened for debug
[Area 0] int_Omega = 1[ 1 ]
[Area 0] int_Omega = 4[ 4 ]
[Area 0] int_Omega = 0.666667[ 0.666667 ]
\endverbatim

We remark that the results are exact. Integrating higher order
polynomials (\f$\geq 3\f$) or non-polynomial function would typically
require higher order quadrature to get accurate results. To do that
increase <tt>imOrder</tt> in the example and try integrating
\f$f(x,y)=x^3 + x y^2\f$.


In order to see what happens in parallel, use <tt>mpirun</tt> to
launch <tt>myintegrals</tt> on several processors, for example

\verbatim
> mpirun -np 4 myintegrals --hsize=0.1
> cat ~/life/myintegrals/Simplex_2_1/h_0.1/myintegrals-4.0
myintegrals-4.0 is opened for debug
[Area 0] int_Omega = 1[ 0.253348 ]
[Area 0] int_Omega = 4[ 1.44444 ]
[Area 0] int_Omega = 0.666667[ 0.0701812 ]
> cat ~/life/myintegrals/Simplex_2_1/h_0.1/myintegrals-4.1
myintegrals-4.1 is opened for debug
[Area 0] int_Omega = 1[ 0.288919 ]
[Area 0] int_Omega = 4[ 0.444444 ]
[Area 0] int_Omega = 0.666667[ 0.186251 ]
> cat ~/life/myintegrals/Simplex_2_1/h_0.1/myintegrals-4.2
myintegrals-4.2 is opened for debug
[Area 0] int_Omega = 1[ 0.183219 ]
[Area 0] int_Omega = 4[ 1.11111 ]
[Area 0] int_Omega = 0.666667[ 0.105008 ]
> cat ~/life/myintegrals/Simplex_2_1/h_0.1/myintegrals-4.3
myintegrals-4.3 is opened for debug
[Area 0] int_Omega = 1[ 0.274514 ]
[Area 0] int_Omega = 4[ 1 ]
[Area 0] int_Omega = 0.666667[ 0.305227 ]
\endverbatim

\section StandardFormulationLaplacian Standard formulation: the Laplacian case

\subsection MathematicalFormulation Mathematical formulation

In this example, we would like to solve for the following problem in 2D
find \f$u\f$ such that
\f[
  -\Delta u = f\ \text{in}\ \Omega = [-1;1]^2
\f]
with
\f[
  f= 2 \pi^2  g
\f]
and \f$g\f$ is the exact solution
\f[
  g=\sin(\pi x) \cos(\pi y)
\f]
The following boundary conditions apply
\f[
  u=g_{|x=\pm 1}, \quad \frac{\partial u}{\partial n} = 0_{|y=\pm 1}
\f]

We propose here two possible variational formulations. The first one,
handles the Dirichlet boundary conditions strongly, that is to say the
condition is \emph{incorporated} into the function space definitions.
The second one handles the Dirichlet condition \emph{weakly} and hence
we have a uniform treatment for all types of boundary conditions.



\par Strong Dirichlet conditions

The variational formulation reads as follows, we introduce the spaces
\f[
  \mathcal{X} = \Big\{ v \in H_1(\Omega) \text{ such that } v=g_{|x=-1,x=1} \Big\}
\f]
and
\f[
  \mathcal{V} = \Big\{ v \in H_1(\Omega) \text{ such that } v=0_{|x=-1,x=1} \Big\}
\f]

We multiply (\ref{eq:1}) by \f$v \in \mathcal{V}\f$ then integrate over \f$\Omega\f$ and obtain
\f{equation}{
  \label{eq:13}
  \int_\Omega -\Delta u v = \int_\Omega f v
\f}
We integrate by parts and reformulate the problem as follows:
we look for \f$u \in \mathcal{X}\f$ such that for all \f$v \in \mathcal{V}\f$
\f[
  \int_\Omega \nabla u \cdot \nabla v  = \int_\Omega f v
\f]
In the present space setting~(\ref{eq:12}) and boundary
conditions~(\ref{eq:4}), we have the boundary term from the integration by
parts which is dropped being equal to 0
\f[
  \int_{\partial \Omega} \frac{\partial u}{\partial n} v = 0,
\f]

recalling that

\f[
  \label{eq:21}
  \frac{\partial u}{\partial n} \stackrel{\text{def}}{=} \nabla u \cdot n
\f]

where \f$n\f$ is the outward normal to \f$\partial \Omega\f$ by convention.We
now discretize the problem, we create a mesh out of \f$\Omega\f$, we have
\f[
  \label{eq:10}
  \Omega = \cup_{e=1}^\nel \Omega^e
\f]

where \f$\Omega^e\f$ can be segments, triangles or tetrahedra depending on
\f$d\f$ and we have \f$\nel\f$ of them. We introduce the finite dimensional
spaces of continuous piecewise polynomial of degree \f$N\f$ functions

\f[
  \label{eq:17}
  X_h = \Big\{ v_h  \in C^0(\Omega),\ {v_h}_{|\Omega^e} \in \mathbb{P}_N( \Omega^e ),\   v_h=g_{|x=-1,x=1}\Big\}
\f]

and

\f[
  \label{eq:18}
  V_h = \Big\{ v_h \in C^0(\Omega),\ {v_h}_{|\Omega^e} \in \mathbb{P}_N( \Omega^e ),\   v_h=0_{|x=-1,x=1}\Big\}
\f]

which are out trial and test function spaces respectively.  We now
have the problem we seek to solve which reads in our continuous
Galerkin framework

we look for \f$u_h \in X_h \subset \mathcal{X}\f$ such that for all \f$v \in V_h \subset \mathcal{V}\f$
\f[
\int_\Omega \nabla u_h \cdot \nabla v_h  = \int_\Omega f v_h
\f]

\par Weak Dirichlet conditions

There is an alternative formulation which allows to treat weakly
Dirichlet(Essential) boundary conditions similarly to Neumann(Natural)
and Robin conditions. Following a similar development as in the previous section, the problem reads

We look for \f$u \in X_h \subset H_1(\Omega)\f$ such that for all \f$v \in X_h\f$
\f[
  \int_\Omega \nabla u \cdot \nabla v +
  \int_{|x=-1,x=1} -\frac{\partial u}{\partial n} v - u \frac{\partial v}{\partial n} + \frac{\mu}{h} u v
  =
  \int_\Omega f v +
  \int_{|x=-1,x=1}  - g \frac{\partial v}{\partial n} + \frac{\mu}{h} g v
\f]
where
\f[
  \label{eq:19}
  X_h = \Big\{ v_h \in C^0(\Omega),\ {v_h}_{|\Omega^e} \in \mathbb{P}_N( \Omega^e ) \Big\}
\f]

In (\ref{eq:16}), \f$g\f$ is defined by (\ref{eq:3}). \f$\mu\f$ serves as a penalisation
parameter which should be \f$> 0\f$, e.g. between 2 and 10, and \f$h\f$ is the
size of the face. The inconvenient of this formulation is the
introduction of the parameter \f$\mu\f$, but the advantage is the
\emph{weak} treatment of the Dirichlet condition.

\subsection LifeFormulation Life formulation
\label{sec:life-formulation-1}

First we define the \f$f\f$ and \f$g\f$. To do that we use the new C++
<tt>auto</tt> keyword and associate to <tt>f</tt> and
<tt>g</tt> their corresponding expressions

\dontinclude laplacian.cpp
\skip marker1
\until endmarker1


where <tt>M_PI</tt> is defined in the header
<tt>cmath</tt>.  Using <tt>auto</tt> allows to defined
<tt>f</tt>  and <tt>g</tt> --- which are moderately complex
object --- without having to know the actual type. <tt>auto</tt>
determines automatically the type of the expression using the
<tt>__typeof__</tt> keyword internally.

Then we form the right hand side by defining a linear form whose
algebraic representation will be stored in a
<tt>vector_ptrtype</tt> which is provided by the chosen linear
algebra backend. The linear form is equated with an integral
expression defining our right hand side.

\skip marker2
\until endmarker2

\noindent <tt>form1</tt> generates an instance of the object
representing linear forms, that is to say it mimics the mathematical
object \f$\ell\f$ such that
\f[
  \begin{array}{rccl}
    \ell: & X_h & \mapsto & \mathbb{R}\\
    & v_h & \rightarrow &\ell(v_h)=\int_\Omega f v_h
  \end{array}
\f]
which is represented algebraically in the code by the vector
<tt>F</tt> using the argument <tt>_vector</tt>. The last
argument <tt>_init</tt>, if set to <tt>true</tt>, will zero-out the entries of
the vector <tt>F</tt>.
\note \c _init is  set to <tt>false</tt> by default.


We now turn to the left hand side and define the bilinear form using
the <tt>form2</tt> helper function which is passed \e (i) the
trial function space using the <tt>_trial</tt> option,
\e (ii) the test function space using the <tt>_test</tt>
option, \e (iii) the algebraic representation using
<tt>_matrix</tt>, i.e. a sparse matrix whose type is derived from
one of the linear algebra backends and \e (iv) whether the
associated matrix should initialized using
<tt>_init</tt>.

\skip marker3
\until endmarker3

Finally, we deal with the boundary condition, we implement both
formulation described in appendix~\ref{sec:vari-form-1}. For a
\emph{strong} treatment of the Dirichlet condition, we use the
<tt>on()</tt> keyword of FEEL++ as follows

\skip marker5
\until endmarker5

Notice that we add, using <tt>+=</tt>, the Dirichlet contribution
for the bilinear form. The first argument is the set of boundary faces
to apply the condition: in gmsh the points satisfying \f$x=\pm 1\f$ are
marked using the flags \f$1\f$ and \f$3\f$ (\f$x=-1\f$ and \f$x=1\f$ respectively.)

To implement the weak Dirichlet boundary condition, we add the
following contributions to the left and right hand side:

\dontinclude laplacian.cpp
\skip marker41
\until endmarker41

\dontinclude laplacian.cpp
\skip marker10
\until endmarker10


Note that we use the command line option <tt>--weakdir</tt> set to
1 by default to decide between weak/strong Dirichlet handling.  Apart
the uniform treatment of boundary conditions, the weak Dirichlet
formulation has the advantage to work also in a parallel environment.

Next we solve the   linear   system
\anchor lapsystem
\f[
  D u = F
\f]

where the <tt>solve</tt> function is implemented as follows

\dontinclude laplacian.cpp
\skip marker6
\until endmarker6

Finally we check for the \f$L_2\f$ error in our approximation by computing
\f{equation}{
  \label{eq:7}
  \|u-u_h\|_{L_2}\ =\ \sqrt{\int_\Omega (u-u_h)^2} = \sqrt{\int_\Omega (g-u_h)^2}
\f}
where \f$u\f$ is the exact solution and is equal to \f$g\f$ and \f$u_h\f$ is the
numerical solution of the problem and the components of
\f$u_h\f$ in the \f$P_2\f$ Lagrange basis are given by solving the linear system \ref lapsystem "above".

The code reads

\dontinclude laplacian.cpp
\skip marker7
\until endmarker7


You can now verify that the \f$L_2\f$ error norm behaves like \f$h^{-(N+1)}\f$
where \f$h\f$ is the mesh size and \f$N\f$ the polynomial order. The \f$H_1\f$
error norm would be checked similarly in \f$h^{-N}\f$. The
figure~\ref{fig:2} displays the results using Paraview.

\image html laplacian.png "Solution of the Laplacian problem"
\image latex laplacian.png "Solution of the Laplacian problem" width=.43\linewidth
\image html laplacian_warp.png "Warped solution of the Laplacian problem"
\image latex laplacian_warp.png "Warped solution of the Laplacian problem" width=.43\linewidth

\section MixedFormulationStokesCase Mixed formulation: the Stokes case

We are now interested in solving
the Stokes equations, we would like to solve for the following problem
in 2D

find \f$(\mathbf{u},p)\f$ such that
\f{
  - \mu \Delta \mathbf{u} +\nabla p = \mathbf{f}\quad \text{and}\quad \nabla \cdot \mathbf{u} = 0,\quad \text{in}\ \Omega = [-1;1]^2
\f}
with
\f{
  \label{eq:24}
  \mathbf{f} = \mathbf{0}
\f}
where \f$\mu\f$ being the viscosity. The following boundary conditions apply
\f{
  \label{eq:23}
  \mathbf{u}=\mathbf{1}_{|y=1}, \quad \mathbf{u}=\mathbf{0}_{|\partial \Omega \backslash \{(x,y) \in \Omega | y=1\}}
\f}

In problem (\ref{prob:2}), \f$p\f$ is known up to a constant \f$c\f$,
\emph{i.e.} if \f$p\f$ is a solution then \f$p+c\f$ is also solution. To
ensure uniqueness we impose the constraint that \f$p\f$ should have
zero-mean, \emph{i.e.}
\f[
  \label{eq:26}
  \int_\Omega p = 0
\f]

The problem~\ref{prob:4} now reads

Find \f$(\mathbf{u},p,\lambda)\f$ such that
\f[
  - \mu \Delta \mathbf{u} +\nabla p = \mathbf{f}\quad, \quad \nabla \cdot \mathbf{u} + \lambda = 0, \quad \text{and}\quad \int_\Omega p = 0,\quad \text{in}\ \Omega = [-1;1]^2
\f]

with

\f[
  \mathbf{f} = \mathbf{0}
\f]
where \f$\mu\f$ being the viscosity. The following boundary conditions apply
\f[
  \mathbf{u}=\mathbf{1}_{|y=1}, \quad \mathbf{u}=\mathbf{0}_{|\partial \Omega \backslash \{(x,y) \in \Omega | y=1\}}
\f]

The functional framework is as follows, we look for \f$\mathbf{u}\f$ is
\f$H^1_0(\Omega)\f$ and \f$p\f$ in \f$L^2_0(\Omega)\f$. We shall not seek \f$p\f$ in
\f$L^2_0(\Omega)\f$ but rather in \f$L^2(\Omega)\f$ and use Lagrange
multipliers which live are the constants whose space we denote
\f$\mathbb{P}_0(\Omega)\f$, to enforce~(\ref{eq:26}).

Denote \f$\mathcal{X} = H^1_0(\Omega)\times
L^2(\Omega)\times\mathbb{P}_0(\Omega)\f$, the variational formulation
reads we look for \f$(\mathbf{u}, p, \lambda) \in \mathcal{X}\f$ for all
\f$(\mathbf{v},q,\nu) \in \mathcal{X}\f$
\f[
  \int_\Omega \mu \nabla \mathbf{u} : \nabla \mathbf{v} + \nabla \cdot \mathbf{v} p + \nabla \cdot \mathbf{u}\ q + q \lambda + p \nu  \ = \ \int_\Omega \mathbf{f} \cdot \mathbf{v}
\f]

We build a triangulation \f$\Omega_h\f$ of \f$\Omega\f$, we choose compatible
(piecewise polynomial) discretisation spaces \f$X_h\f$ and \f$M_h\f$,
\emph{e.g.} the Taylor Hood element (\f$\mathbb{P}_N/\mathbb{P}_{N-1}\f$)
and we denote \f$\mathcal{X}_h=X_h\times M_h \times
\mathbb{P}_0(\Omega)\f$.  The discrete problem now reads, we look for
\f$(\mathbf{u}_h,p_h,\lambda_h) \in \mathcal{X}_h\f$ such that for all
\f$(\mathbf{v}_h,q_h,\nu_h) \in \mathcal{X}_h\f$
\f[
  \label{eq:27}
  \int_{\Omega_h} \mu \nabla \mathbf{u}_h \cdot \nabla \mathbf{v}_h + \nabla \cdot \mathbf{v}_h \ p_h + \nabla \cdot \mathbf{u}_h\ q_h + p_h \nu_h + q_h \lambda_h   = \ \int_{\Omega_h} \mathbf{f} \cdot \mathbf{v}_h
\f]

The formulation~(\ref{eq:27}) leads to a linear system of the form
\f[
  \label{eq:28}
  \underbrace{\begin{pmatrix}
    A & B & 0\\
    B^T & 0 & C\\
    0 & C^T & 0
  \end{pmatrix}}_{\mathcal{A}}
\underbrace{
  \begin{pmatrix}
    \mathbf{u}_h\\
    p_h\\
    \lambda_h
  \end{pmatrix}}_{\mathcal{U}} =
\underbrace{\begin{pmatrix}
    F\\
    0\\
    0
  \end{pmatrix}}_{\mathcal{F}}
\f]

where \f$A\f$ corresponds to the \f$(\mathbf{u},\mathbf{v})\f$ block, \f$B\f$ to
the \f$(\mathbf{u},q)\f$ block and \f$C\f$ to the \f$(p,\nu)\f$
block. \f$\mathcal{A}\f$ is a symetric positive definite matrix and thus
the system \f$\mathcal{A} \mathcal{U} = \mathcal{F}\f$ enjoys a unique
solution.

\subsection LifeFormulation Life formulation


Regarding the implementation of the Stokes problem~\ref{prob:4}, we
can start from the laplacian case, from
section~\ref{sec:defin-bilin-forms}. The implementation we choose to
display here defines and builds \f$\mathcal{X}_h\f$, \f$\mathcal{A}\f$,
\f$\mathcal{U}\f$ and \f$\mathcal{F}\f$.

We start by defining and building \f$\mathcal{X}_h\f$: first we define the
basis functions that will span each subspaces \f$X_h\f$, \f$M_h\f$ and
\f$\mathbb{P}_0(\Omega)\f$.

\dontinclude stokes.cpp
\skip marker1
\until endmarker1

note that on the <tt>typedef</tt> we build a (MPL) vector of them. Now we are
ready to define the functionspace \f$\mathcal{X}_h\f$, much like in the
Laplacian case:

\skip marker2
\until endmarker2

Next we define a few types which are associated with \f$\mathcal{U}\f$,
\f$u\f$, \f$p\f$ and \f$\lambda\f$ respectively.

\skip marker3
\until endmarker3

Using these types we can instantiate elements of \f$\mathcal{X}_h\f$,
\f$X_h\f$, \f$M_h\f$ and \f$\mathbb{P}_0(\Omega_h)\f$ respectively:

\skip marker4
\until endmarker4

They will serve in the definition of the variational formulation. We
can now start assemble the various terms of the variational
formulation~(\ref{eq:27}). First we define some viscous stress tensor,
%\f$\tau(\mathbf{u}) = \frac{1}{2}(\nabla \mathbf{u} + \nabla \mathbf{u}^T)\f$,
\f$\tau(\mathbf{u}) = \nabla \mathbf{u}\f$,
associated with the trial and test functions
respectively

\skip marker5
\until endmarker5


Then we define the total stress tensor times the normal,
\f$\bar{\sigma}(\mathbf{u},p) \mathbf{n} = -p \mathbf{n} + 2 \mu \tau(\mathbf{u})
\mathbf{n}\f$ where \f$\mathbf{n}\f$ is the normal and \f$\bar{\sigma}(\mathbf{u},p) =
-p \mathbb{I} + 2 \mu \tau(\mathbf{u})\f$:

\skip marker6
\until endmarker6


We then form the matrix \f$\mathcal{A}\f$ starting with block \f$A\f$,  block \f$B\f$
block \f$C\f$ and finally the boundary conditions.

\skip marker7
\until endmarker7

The figure~\ref{fig:2} displays \f$p\f$ and \f$\mathbf{u}\f$ which are available in
\verbatim
  ls ~/life/doc/tutorial/stokes/Simplex_2_1_2/P2/h_0.05
\endverbatim

\image html stokes-p.png "Pressure for the Stokes problem"
\image html stokes-u.png "Velocity (magnitude and arrows colored with pressure) for the Stokes problem"
\image latex stokes-p.png "Pressure for the Stokes problem" width=.43\linewidth
\image latex stokes-u.png "Velocity (magnitude and arrows colored with pressure) for the Stokes problem" width=.43\linewidth

*/
}
