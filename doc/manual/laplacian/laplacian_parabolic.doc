/**
   \page LaplacianParabolic Parabolic equation example
   \file laplacian_parabolic.cpp
   \author Christophe Prud'homme <christophe.prudhomme@feelpp.org>
   \date 2013-06-19

	\tableofcontents

	\section Description
	This section is about another example easy to learn and understand :  the parabolic equation. The aim is to solve equations like :
	\f{equation}
	\left\{
	\begin{aligned}
		\dfrac{\partial u}{\partial t} - nu*\Delta u = f & \text{on}\; \Omega \;, \
		        u & =  0 & \text{on}\;\partial\Omega \;,\
	\end{aligned}
	\right.
	\f}
	\f{equation}

	where \f$u\in\Omega\f$ is the unknown "trial" function and \f$\Omega\f$ the domain.

	However this laplacian_parabolic can also be used in the stationnary form, that is to say, solving the equation : 
		\f{equation}
	\left\{
	\begin{aligned}
			 - nu*\Delta u = f & \text{on}\; \Omega \;, \
		        u & =  0 & \text{on}\;\partial\Omega \;,\
	\end{aligned}
	\right.
	\f}
	\f{equation}
	
	\subsection{Time Discretization}

	The time derivative will be discretized following a backward method called \textit{Backward Differentiation Formula}. It is a finite differences method, used a lot in time discretization.

	\section Implementation
	The overall code is based on the laplacian.cpp application in which we put the BDF structure and added some useful options also. Here, we don't go deeply in the implementation of the BDF method; a how-to about it can be get in Feel++'s pdf tutorial.

    \subsection BDF set up
    First we instantiate BDF stuffs :
    \snippet laplacian_parabolic.cpp marker1

    Then we put a \textit{do..while} loop for the time iteration :
    \verbatim
    do{
        //set the linear form
        form1=...

        //set the bilinear form
        form2=...
	
	//solve
	backend(_rebuild=true)->solve(...);
    }while( M-bdf->isFinished() == false );
    \endverbatim

    \par
    The time derivative discretization is done in black box; we simply wrote :
    \snippet laplacian_parabolic.cpp marker8
    for the bilinear form, and : 
    \snippet laplacian_parabolic.cpp marker9
    for the linear form. In steady mode, those terms will not be added.

    Only temporal terms are concerned, so it is useless to put static terms inside the time loop : 
    \snippet laplacian_parabolic.cpp marker3
    \snippet laplacian_parabolic.cpp marker10

    The rest of the terms (linear form in particular) are inside the loop.

    At the end of each solving, one should not forget shifting the numerical solution : 
    \snippet laplacian_parabolic.cpp marker15
    and increment the iteration :
    \snippet laplacian_parabolic.cpp marker16

	\subsection Error class
	The Error class allows users to define a test solution that has to be found by the application, to compute the Right Hand Side term of the equation and to compute L2 and H1 errors.

	First we set the exact solution (if it is given in the .cfg file) and the associated parameter(s) : 
	\snippet laplacian_parabolic.cpp marker11
	\snippet laplacian_parabolic.cpp marker12
	
	Then compute the rhs according to the equation :
	\snippet laplacian_parabolic.cpp marker13

	Eventually, compute the L2 and H1 error : 
	\snippet laplacian_parabolic.cpp marker14

	\paragraph ! Be careful, do NOT use the L2 and H1 error computation of the Error class, because they are written in cylindrical coordinates !

	\section Results

	To verify and validate the implementation, we made convergence study in stationnary and in temporal modes.
	The exact solution in the input is :
	\f{equation}
	\sin(\Pi(x-1)) \sin(\Pi\dfrac{y-0.05}{0.1})e^{-t}
	\f{equation}
	(in the border, it is indeed equal to 0).

	For the time error, we implemented this formula :

	\f{equation}
	E_{r} = \left( \Delta t \: \sum\limits_{t=t_i}^{t_f} \| u - u^n \|_{L^2(\Omega^{tn})}^2 \right)^{\frac{1}{2}}
	\f
	\f{equation}

	Here we go with the graphs :
	\subsection Stationnary study
	{not done yet}

	\subsection Temporal study
	{not included yet}
	
 */
