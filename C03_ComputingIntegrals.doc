// -*- mode: c++; coding: utf-8 -*-
namespace Life
{
/*! \page ComputingIntegrals Computing integrals

\ingroup Tutorial
\li \b Previous: \ref ManipulatingMeshes
\li \b Next: \ref ManipulatingFunctionSpaces

\section ComputingIntegralsProblem Problem Statement

We would like to compute some integrals on a domain \f$\Omega\f$ and parts of
the domain, i.e. subregions and (parts of) boundary. In this tutorial the domain
can be either

\f[
\Omega=[0,1]^d\ \subset\ \mathbb{R}^d
\f]

or

\f[
\Omega=\{ \mathbf{x} \in \mathbb{R}^d | x_i \geq 0, \sum_{i=1}{d} x_i \leq 1 \}
\f]

with \f$ d=1,2,3 \f$ and \f$ \mathbf{x}=(x_1,...,x_d) \f$.

These domains are plotted in this \ref ManipulatingMeshes "Section".

Once we have defined the computational mesh, we would like to compute
the following integrals:

 - \f$ \int_\Omega 1 \f$ : the measure of the domain
 - \f$ \int_{\partial\Omega} 1 \f$ the measure of the surface of the domain (Dim>1)
 - \f$ \int_{\Omega} x^2+y^2+z^2 \f$ the integral over \f$\Omega\f$ of \f$ (x,y,z) \mapsto
   x^2+y^2+z^2\f$ with the convention that \f$y=z=0\f$ in 1D and \f$ z=0 \f$ in
   3D.
 - \f$ \int_{\Omega} sin(x^2+y^2+z^2) \f$ the integral over \f$\Omega\f$ of \f$ (x,y,z) \mapsto
   sin(x^2+y^2+z^2)\f$ with the same convention as above.

\section ComputingIntegralsCode Implementation

We now turn to the implementation. To compute the first integral, the code reads

\dontinclude myintegrals.cpp
\skip marker1
\until endmarker1

<tt>elements(mesh)</tt> returns a pair of iterators over the elements owned by
the current processor. Now that we have computed the integral of 1 over the
region of \f$\Omega\f$ current processor (ie the area of the domain owned by the
processor), we want to compute the area of \f$\Omega\f$. To do that we collect
the integrals on all processors using a <tt>reduce</tt> MPI operation and sum
all contributions. We have used here the Boost.MPI library that provides an
extremely powerful \cpp wrapper around the MPI library. The code reads

\skip marker2
\until endmarker2


Finally, we print to the log file the result of the local and global
integral calculation.

\skip marker3
\until endmarker3

Another calculation is for example to compute the perimeter of the domain

\skip marker4
\until endmarker4

The main difference with the domain area computation resides in the elements
with are iterating on: here we are iterating on the boundary faces of the domain
to compute the integral using <tt>boundaryfaces(mesh)</tt> to provide the pairs
of iterators.


Now say that we want to compute the third integral. The Finite Element Embedded
Language (FEEL++) language provides the keyword <tt>Px()</tt> and <tt>Py()</tt>
to denote the \f$x\f$ and \f$y\f$ coordinates like in equation above.  The code
reads then

\skip marker5
\until endmarker5

\subsection ComputingIntegralsNote A note on quadratures

Life computes automatically the quadrature associated the expression under the
integral. If the expression is polynomial then the quadrature is exact. If the
expression is not polynomial, then each non-polynomial term in the expression is
considered a polynomial of degree 2 by default.

Here is how the 4-th integral can be computed letting Life decide about the
quadrature

\skip marker6
\until endmarker6

An alternative is to set yourself the quadrature by passing a new argument to
the \c integrate function: \c _Q<Order>() where \c Order is the maximum
polynomial order that the quadrature should integrate exactely.

\skip marker7
\until endmarker7



\section ComputingIntegralsRuntime Executing the code

\subsection IntegralsOverSimplex Integrals over a simplex domain

Let's run now the tutrial example <tt>life_doc_myintegrals</tt>: First we
generate the simplex shape domain in all 3 dimensions

\verbatim
life_doc_myintegrals --shape="simplex"--nochdir
\endverbatim

\htmlonly <table><tr><td> \endhtmlonly
\image html myintegrals-simplex-1.png "Line" width=5cm
\htmlonly </td><td> \endhtmlonly
\image html myintegrals-simplex-2.png "Triangle" width=5cm
\htmlonly </td><td> \endhtmlonly
\image html myintegrals-simplex-3.png "Tetrahedron" width=5cm
\htmlonly </td></tr></table> \endhtmlonly

The output gives
\include myintegrals-simplex.out

\subsection IntegralsOverHypercube Integrals over an hypercube domain

We do the same now with the hypercube shape domain in all 3 dimensions

\verbatim
life_doc_myintegrals --shape="hypercube"--nochdir
\endverbatim


\htmlonly <table><tr><td> \endhtmlonly
\image html myintegrals-hypercube-1.png "Line" width=5cm
\htmlonly </td><td> \endhtmlonly
\image html myintegrals-hypercube-2.png "Unit Square" width=5cm
\htmlonly </td><td> \endhtmlonly
\image html myintegrals-hypercube-3.png "Unit Cube" width=5cm
\htmlonly </td></tr></table> \endhtmlonly


The output gives
\include myintegrals-hypercube.out

\li \b Previous: \ref ManipulatingMeshes
\li \b Next: \ref ManipulatingFunctionSpaces

*/
}
